=head1 NAME

Perldoc Browser - Docker Deployment

=head1 DESCRIPTION

The Objective of the C<Docker Deployment> is to be able to run the C<perldoc-browser.pl> Command in
a seperate Docker Container.
It can be useful to run C<Test::Mojo> Test Suites.

=head1 REQUIREMENTS

To build and run the Docker Container the Minimum Requirement is to have the C<Docker> Service installed.
Additionally the C<docker-compose> Command can provide a nice enhancement to ease the Operation
of the Docker Container.

=head1 INSTALLATION

=over

=item docker-compose

To run the Docker Container with the C<docker-compose> Command the C<docker-compose> Package should
be installed first. The C<docker-compose> Package is provided by most Linux Distributions.

=item Docker Engine

Next the C<Docker> Service has to be installed locally.
if you want to use C<docker-compose> it is recommended to do this step first because
the C<docker-compose> installation can break your Docker Engine installation.
To install the Docker Engine it is recommended to follow the guides of the Official Documentation
L<Docker Engine Installation|https://docs.docker.com/engine/install/>

=back

=head1 IMAGE BUILD

=over 4

=item Preconditions

=over 2

=item * The Docker Service must be running

=item * Build User must have access to the Docker Service (perhaps C<root> access is required)
 the Build User Account must be part of the C<docker> User Group as described at
L<Post Installation Steps|https://docs.docker.com/engine/install/linux-postinstall/#manage-docker-as-a-non-root-user>

=item * Current Working Directory must be the Project Root Directory

=item * The C<docker-compose> Build requires a F<docker-compose.yml> file which can be created
  from the F<docker-compose.yml.example> file

=back

=item Build with C<docker-compose>

To build the Container Images with C<docker-compose> a F<docker-compose.yml> file is required.
It can be created from the F<docker-compose.yml.example> file by copying it.
The F<docker-compose.yml> file describes two Services, C<web> and C<db>, which are the
C<Mojolicious> Web Application as C<web> and the C<PostgreSQL> Database as C<db>.
Within the F<docker-compose.yml> file the entries C<services.web.volumes> and C<services.db.volumes>
must be configured to contain the absolute path to the Project Root Directory on the system.
The F<docker-compose.yml> file contains instructions to expose the C<Mojolicious> Web Service
on Port C<3000> which seems to be the default behaviour for the Application.
If the Application was configured to listen on a different port the file entry C<services.web.ports>
must be adjusted accordingly.
It also exposes the C<PostgreSQL> Database on Port C<5432>.
So the command to build the docker images and launch them is:

    docker-compose up --build

To build only the Web Service image it can be done by naming it explicitly like:

    docker-compose up --build web

=item Build with Docker

The Container Image for the C<Mojolicious> Web Service was called "I<perldoc_web>" to difference it
from the C<PostgreSQL> Database Backend Container Image which is called "I<perldoc_db>".
So the commands to build the docker image is:

    docker build -t perldoc_web .

The C<PostgresSQL> Database Image does not need to be built. It will only be downloaded
as it is from the C<DockerHub>. Therefore it does not have a F<Dockerfile> file.
Any Download and initial configuration of the Database Image will happen at Start-Up
with the C<docker-compose> command.

=back

=head1 IMAGE INITIALISATION

=over

=item C<cpanm> Installation

As discussed in the task issue L<Docker Deployment Task|https://github.com/Grinnz/perldoc-browser/issues/26> the
installation of the I<Perl> Modules for the SQLite Backend from the F<cpanfile> was executed at Image Build Time.
So on updates of the F<cpanfile> it is recommendable to rebuild the Container Image as described above
under L<B<IMAGE BUILD>>.

The used F<cpanfile> can be found in F</usr/share/perldoc-browser/> within the Docker Image.
Also the C<cpanm> Installation Log is found inside the Image in F</usr/share/perldoc-browser/log/>.

To inspect the Docker Image run the command:

    docker run -it -v /absolute/path/to/project:/home/perldoc-browser:Z perldoc_web bash

This will give a C<bash> shell and the file system can be inspected.

Still the Container Start-Up Script F<entrypoint.sh> will detect a different backend configuration
or the C<perldoc-browser.pl install> Command and check whether the key dependencies are met
and run the C<cpanm> Installation accordingly

=item Starting up the Docker Cluster

The Docker Cluster consists of three components.
To access any of these components at first the Docker Cluster needs to be started with
this C<docker-compose> command:

    docker-compose up -d

It is important to verify that the containers are running correctly with:
(The Container State must be in C<Up>)

    docker-compose ps

This will make the three components accessible with the C<docker-compose exec> command.

=over 2

=item * The I<Web Site>

The I<Web Site> is accessible with the component name C<web>.
In the I<Web Site> component runs the C<perldoc-browser.pl> I<Mojolicious> Web Application.
To access the I<Web Site> component and get a C<bash> prompt
this C<docker-compose> command can be used:

    docker-compose exec web bash

=item * The I<PostgreSQL> Database

The I<PostgreSQL> Database is only within the C<docker-compose> environment known with the hostname C<db>.
So, to use the database hostname C<db> any command must be run within the C<docker-compose> environment.
On a new installation the ownership of I<PostgreSQL> data directory must be changed
to match the containers C<postgres> user with this command:

    chown 70:70 data/pg

=item * The I<Elasticsearch> Engine

The I<Elasticsearch> Engine is only within the C<docker-compose> environment known with the hostname C<elasticsearch>.
So, to use the I<Elasticsearch> hostname C<elasticsearch> any command must be run within the C<docker-compose> environment.
The I<Elasticsearch> API is also accessible on the external port C<9200>.
So, it can also be queried with the URL C<http://localhost:9200> from outside the Docker Cluster.
According to the official I<Elastic.co> documentation the Virtual Memory per process must
be increased as documented at
L<Virtual Memory Requirements|https://www.elastic.co/guide/en/elasticsearch/reference/6.8/vm-max-map-count.html>.
It can be increase temporary with this command:

    sysctl -w vm.max_map_count=262144

or it can be set permanently within a file like F</etc/sysctl.d/elasticserach.conf> or directly in F</etc/sysctl.conf>

    vm.max_map_count = 262144

and then reloaded with the command C<sysctl -p>.
The I<Suse> Documentation explains very nicely how and whether this will affect the system
as documented at L<I<Suse> Documentation on C<vm.max_map_count>|https://www.suse.com/support/kb/doc/?id=000016692>

B<NOTICE:>

=over 2

The I<Elasticsearch> Engine is known to start up slow. It can take up to B<30 s>.
This is also understandable from the referenced I<Suse> Documentation on the Virtual Memory Requirement.
So, a too early querying can produce an error as documented at
L<Too early Query produces an Exception|https://github.com/Grinnz/perldoc-browser/issues/45>.
See L</"Querying the I<Elasticsearch> Engine"> for instructions to check whether
the engine is ready for service

=back

=back

=item Populating the search backend

The new built Container Image contains an empty C<perldoc-browser.pl> Installation
To run correctly the Search Backend needs to be populated.

Now the command to populate the Search Backend is:

    docker-compose exec web entrypoint.sh perldoc-browser.pl index all

This will execute command C<perldoc-browser.pl index all> in the project directory.
The results will be stored persistently in the project directory for further container launches.

=item Accessing the I<PostgreSQL> Database

To be able to access the database the Docker Cluster must be launched as described
in L</"B<Starting up the Docker Cluster>">.

Next the command C<psql> can be used within the C<PostgreSQL> container.
The C<PostgreSQL> image is based on I<Alpine Linux>
So a console access can be obtained with the C<docker-compose> command:

    docker-compose exec db /bin/sh

The default database is called "I<perldoc>" and the database login is also called "I<perldoc>".
So to login into the database the C<psql> command is:

    psql -h db -U perldoc perldoc

With an initialized database the "I<perldoc>" database should contain 6 tables:

    perldoc=# \dt
		             List of relations
     Schema |      Name       | Type  |  Owner
    --------+-----------------+-------+---------
     public | faqs            | table | perldoc
     public | functions       | table | perldoc
     public | mojo_migrations | table | perldoc
     public | perldeltas      | table | perldoc
     public | pods            | table | perldoc
     public | variables       | table | perldoc
    (6 rows)

The C<pods> table can contain for 1 I<Perl> Version 1456 entries:

    perldoc=# select count(*) from pods;
     count
    -------
      1456
    (1 row)


=item Querying the I<Elasticsearch> Engine

The I<Elasticsearch> Engine needs to be queried in different occasions to check its
availability and health and the correctness of the indices.
This can be done easily over the I<Elasticsearch> API by using the Web Endpoints that it publishes.

=over 2

=item Ready for Service

The I<Elasticsearch> Engine is ready for service when its Root Web Endpoints produces
a HTTP Response with B<HTTP Status Code> C<200 OK>

    curl http://localhost:9200

The Response will look similar to this:

    > GET / HTTP/1.1
    > Host: localhost:9200
    > User-Agent: curl/7.64.0
    > Accept: */*
    >
    < HTTP/1.1 200 OK
    < content-type: application/json; charset=UTF-8
    < content-length: 490
    <
    {
      "name" : "Evou766",
      "cluster_name" : "elasticsearch",
      "cluster_uuid" : "D7p_jR1TQBeK7J69Hk3QRg",
      "version" : {
        "number" : "6.8.13",
        "build_flavor" : "oss",
        "build_type" : "tar",
        "build_hash" : "be13c69",
        "build_date" : "2020-10-16T09:09:46.555371Z",
        "build_snapshot" : false,
        "lucene_version" : "7.7.3",
        "minimum_wire_compatibility_version" : "5.6.0",
        "minimum_index_compatibility_version" : "5.0.0"
      },
      "tagline" : "You Know, for Search"
    }

=item Cluster Health Status

The I<Elasticsearch> Cluster Health is an indicator for any error within the engine
or the indices. A status of "I<green>" or "I<yellow>" indicates a correct and healthy status.
While a status "I<red>" indicates an error within the indices. This can originate
from uncomplete or interrupted indexing or an sudden crash of the engine.
An re-indexing might fix this issue.
The Cluster Health can be checked over this API endpoint:

    curl -v http://localhost:9200/_cat/health

The Response will look similar to this:

    > GET /_cat/health HTTP/1.1
    > Host: localhost:9200
    > User-Agent: curl/7.64.0
    > Accept: */*
    >
    < HTTP/1.1 200 OK
    < content-type: text/plain; charset=UTF-8
    < content-length: 65
    <
    1636891612 12:06:52 elasticsearch yellow 1 1 5 5 0 0 5 0 - 50.0%

=item Indices Health Status

The I<Elasticsearch> Indices Health Status is an indicator for any error within the indices.
A status of "I<green>" or "I<yellow>" indicates a correct and healthy status.
While a status "I<red>" indicates an error within the indices. This can originate
from uncomplete or interrupted indexing or an sudden crash of the engine.
An re-indexing might fix this issue.
The Indices Health Status can be checked over this API endpoint:

    curl -v http://localhost:9200/_cat/indices

The Response will look similar to this:

    > GET /_cat/indices HTTP/1.1
    > Host: localhost:9200
    > User-Agent: curl/7.64.0
    > Accept: */*
    >
    < HTTP/1.1 200 OK
    < content-type: text/plain; charset=UTF-8
    < content-length: 455
    <
    yellow open perldeltas_5.28.1_1636798290 BTS4QdaeQk6OJLFnyYUI9g 1 1 2164 0   3.2mb   3.2mb
    yellow open faqs_5.28.1_1636798290       gyrqSq7mQrKXzAmQJ4cGVA 1 1  305 0 784.9kb 784.9kb
    yellow open variables_5.28.1_1636798290  wjDlOrQrRaWb77HTKhdA5Q 1 1  150 0  17.2kb  17.2kb
    yellow open pods_5.28.1_1636798290       PJ-EZ0IbQb67EOzkGrVj1w 1 1 1579 0  23.2mb  23.2mb
    yellow open functions_5.28.1_1636798290  xzukrTriSNWiyPqKMpZU4w 1 1  292 0 570.6kb 570.6kb

=item Aliases Associations

The Project also uses aliases in I<Elasticsearch>. It is important that they are set correctly.
The Aliases Associations can be checked over this API endpoint:

    curl -v http://localhost:9200/_cat/aliases

The Response will look similar to this:

    > GET /_cat/aliases HTTP/1.1
    > Host: localhost:9200
    > User-Agent: curl/7.64.0
    > Accept: */*
    >
    < HTTP/1.1 200 OK
    < content-type: text/plain; charset=UTF-8
    < content-length: 265
    <
    functions_5.28.1  functions_5.28.1_1636798290  - - -
    perldeltas_5.28.1 perldeltas_5.28.1_1636798290 - - -
    faqs_5.28.1       faqs_5.28.1_1636798290       - - -
    variables_5.28.1  variables_5.28.1_1636798290  - - -
    pods_5.28.1       pods_5.28.1_1636798290       - - -

=back

=back

=cut
