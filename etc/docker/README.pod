=head1 NAME

Perldoc Browser - Docker Deployment

=head1 DESCRIPTION

The Objective of the C<Docker Deployment> is to be able to run the C<perldoc-browser.pl> Command in
a seperate Docker Container.
It can be useful to run C<Test::Mojo> Test Suites.

=head1 REQUIREMENTS

To build and run the Docker Container the Minimum Requirement is to have the C<Docker> Service installed.
Additionally the C<docker-compose> Command can provide a nice enhancement to ease the Operation
of the Docker Container.

=head1 INSTALLATION

=over

=item docker-compose

To run the Docker Container with the C<docker-compose> Command the C<docker-compose> Package should
be installed first. The C<docker-compose> Package is provided by most Linux Distributions.

=item Docker Engine

Next the C<Docker> Service has to be installed locally.
if you want to use C<docker-compose> it is recommended to do this step first because
the C<docker-compose> installation can break your Docker Engine installation.
To install the Docker Engine it is recommended to follow the guides of the Official Documentation
L<Docker Engine Installation|https://docs.docker.com/engine/install/>

=back

=head1 IMAGE BUILD

=over 4

=item Preconditions

=over 2

=item * The Docker Service must be running

=item * Build User must have access to the Docker Service (perhaps C<root> access is required)
 the Build User Account must be part of the C<docker> User Group as described at
L<Post Installation Steps|https://docs.docker.com/engine/install/linux-postinstall/#manage-docker-as-a-non-root-user>

=item * Current Working Directory must be the Project Root Directory

=item * The C<docker-compose> Build requires a F<docker-compose.yml> file which can be created
  from the F<docker-compose.yml.example> file

=back

=item Build with C<docker-compose>

To build the Container Images with C<docker-compose> a F<docker-compose.yml> file is required.
It can be created from the F<docker-compose.yml.example> file by copying it.
The F<docker-compose.yml> file describes two Services, C<web> and C<db>, which are the
C<Mojolicious> Web Application as C<web> and the C<PostgreSQL> Database as C<db>.
Within the F<docker-compose.yml> file the entries C<services.web.volumes> and C<services.db.volumes>
must be configured to contain the absolute path to the Project Root Directory on the system.
The F<docker-compose.yml> file contains instructions to expose the C<Mojolicious> Web Service
on Port C<3000> which seems to be the default behaviour for the Application.
If the Application was configured to listen on a different port the file entry C<services.web.ports>
must be adjusted accordingly.
It also exposes the C<PostgreSQL> Database on Port C<5432>.
So the command to build the docker images and launch them is:

    docker-compose up --build

To build only the Web Service image it can be done by naming it explicitly like:

    docker-compose up --build web

=item Build with Docker

The Container Image for the C<Mojolicious> Web Service was called "I<perldoc_web>" to difference it
from the C<PostgreSQL> Database Backend Container Image which is called "I<perldoc_db>".
So the commands to build the docker image is:

    docker build -t perldoc_web .

The C<PostgresSQL> Database Image does not need to be built. It will only be downloaded
as it is from the C<DockerHub>. Therefore it does not have a F<Dockerfile> file.
Any Download and initial configuration of the Database Image will happen at Start-Up
with the C<docker-compose> command.

=back

=head1 IMAGE INITIALISATION

=over

=item C<cpanm> Installation

As discussed in the task issue L<Docker Deployment Issue|https://github.com/Grinnz/perldoc-browser/issues/26> the
installation of the I<Perl> Modules for the SQLite Backend from the F<cpanfile> was executed at Image Build Time.
So on updates of the F<cpanfile> it is recommendable to rebuild the Container Image as described above
under L<B<IMAGE BUILD>>.

The used F<cpanfile> can be found in F</usr/share/perldoc-browser/> within the Docker Image.
Also the C<cpanm> Installation Log is found inside the Image in F</usr/share/perldoc-browser/log/>.

To inspect the Docker Image run the command:

    docker run -it -v /absolute/path/to/project:/home/perldoc-browser:Z perldoc_web bash

This will give a C<bash> shell and the file system can be inspected.

Still the Container Start-Up Script F<entrypoint.sh> will detect a different backend configuration
or the C<perldoc-browser.pl install> Command and check whether the key dependencies are met
and run the C<cpanm> Installation accordingly

=item starting up the Docker Cluster

The C<PostgreSQL> Database is only within the C<docker-compose> environment known with the hostname C<db>.
So to use the database hostname C<db> any command must be run within the C<docker-compose> environment.
To startup the Docker Cluster with the C<docker-compose> environment the following command
is needed at first:

    docker-compose up -d

It is important to verify that the containers are running correctly with:
(The Container State must be in C<Up>)

    docker-compose ps

=item populating the search backend

The new built Container Image contains an empty C<perldoc-browser.pl> Installation
To run correctly the Search Backend needs to be populated.

Now the command to populate the Search Backend is:

    docker-compose exec web entrypoint.sh perldoc-browser.pl index all

This will execute command C<perldoc-browser.pl index all> in the project directory.
The results will be stored persistently in the project directory for further container launches.

=item accessing the C<PostgreSQL> Database

To be able to access the database the Docker Cluster must be launched as described
in L<B<starting up the Docker Cluster>>.

Next the command C<psql> can be used within the C<PostgreSQL> container.
The C<PostgreSQL> image is based on I<Alpine Linux>
So a console access can be obtained with the C<docker-compose> command:

    docker-compose exec db /bin/sh

The default database is called "I<perldoc>" and the database login is also called "I<perldoc>".
So to login into the database the C<psql> command is:

    psql -h db -U perldoc perldoc

With an initialized database the "I<perldoc>" database should contain 6 tables:

    perldoc=# \dt
		             List of relations
     Schema |      Name       | Type  |  Owner
    --------+-----------------+-------+---------
     public | faqs            | table | perldoc
     public | functions       | table | perldoc
     public | mojo_migrations | table | perldoc
     public | perldeltas      | table | perldoc
     public | pods            | table | perldoc
     public | variables       | table | perldoc
    (6 rows)

The C<pods> table can contain for 1 I<Perl> Version 1456 entries:

    perldoc=# select count(*) from pods;
     count
    -------
      1456
    (1 row)

=back

=cut
